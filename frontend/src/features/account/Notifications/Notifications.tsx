import type { AxiosError } from 'axios';
import { motion } from 'framer-motion';
import { observer } from 'mobx-react-lite';
import { useContext, useState, useEffect } from 'react';
import { formatDateFromISO } from '../../../helpers/formatDatePhone';
import { Context } from '../../../main';
import type { TypeResponse } from '../../../models/response/DefaultResponse';
import AccountLayout from '../../../pages/account/AccountLayout';
import UserService from '../../../services/UserService';
import './Notifications.scss';


const typeIcons: Record<string, string> = {
    CONSULTATION: "üìÖ",
    PAYMENT: "üí¨",
    ERROR: "üö®",
    WARNING: "‚öôÔ∏è",
    INFO: "üîî"
};

export interface INotification {
    id: number;
    title: string;
    message: string;
    type: "INFO" | "WARNING" | "ERROR" | "CONSULTATION" | "PAYMENT";
    isRead: boolean;
    userId: number;
    createdAt: string;
    entity?: object;
    entityType?: string;
}

const Notifications: React.FC = () => {
    const { store } = useContext(Context);
    const [notifications, setNotifications] = useState<INotification[]>([]);

    // –ü—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const markAsRead = async (id: number) => {
        try {
            await UserService.readNotification(id);
            fetchNotifications();
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å id: ${id}:`, error.response?.data.message);
        }
    };

    // –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const markAsReadAll = async () => {
        try {
            await UserService.readNotifciatonAll(store.user.id);
            fetchNotifications();
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error.response?.data.message);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const deleteMessage = async (id: number) => {
        try {
            await UserService.deleteNotification(id);
            store.decrimentCountMessage();
            fetchNotifications();
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å id: ${id}: `, error.response?.data.message);
        }
    }

    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const deleteAllNotifications = async () => {
        if (!window.confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?")) return;

        try {
            await UserService.deleteNotificationAll(store.user.id);
            store.setCountMessage(0);
            fetchNotifications();
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error.response?.data.message);
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const fetchNotifications = async () => {
        try {
            const response = await UserService.getNotifications(store.user.id);
            setNotifications(response.data);
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ", error.response?.data.message);
        }
    };

    useEffect(() => {
        fetchNotifications();
    }, []);

    return (
        <AccountLayout>
            <div className="page-container notifications">
                <h1 className="notifications__title">
                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notifications.length > 0 && `(${notifications.length})`}
                </h1>

                <div className="notifications__buttons">
                    <button onClick={deleteAllNotifications}>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</button>
                    <button onClick={markAsReadAll}>–ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</button>
                </div>

                <div className="notifications__list">
                    {notifications.length > 0 ? notifications.map(n => (
                        <motion.div
                            key={n.id}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                        >
                            <div className={`notification ${n.isRead ? "notification--read" : "notification--unread"}`}>
                                <div className="notification__icon">{typeIcons[n.type] || typeIcons.default}</div>
                                <div className="notification__content">
                                    <span className="notification__datetime">{formatDateFromISO(n.createdAt)}</span>
                                    <h1 className="notification__header">{n.title}</h1>
                                    <p className="notification__message">{n.message}</p>
                                </div>
                                {!n.isRead && (
                                    <button className="notification__button" onClick={() => markAsRead(n.id)}>
                                        –ü—Ä–æ—á–∏—Ç–∞–Ω–æ
                                    </button>
                                )}
                                <button className="notification__button" onClick={() => deleteMessage(n.id)}>
                                    –£–¥–∞–ª–∏—Ç—å
                                </button>
                            </div>
                        </motion.div>
                    )) : (
                        <div className="notification__empty">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>
                    )}
                </div>
            </div>
        </AccountLayout>
    );
};

export default observer(Notifications);
