import { useEffect, useState } from "react";
import AccountLayout from "../../AccountLayout";
import Search from "../../../../components/UI/Search/Search";
import ConsultationService from "../../../../services/ConsultationService";
import { API_URL } from "../../../../http";
import Pagination from "../../../../components/UI/Pagination/Pagination";
import { Link } from "react-router-dom";
import Tabs from "../../../../components/UI/Tabs/Tabs";
import { getDateLabel } from "../../../../helpers/formatDatePhone";
import type { Consultation } from "../../../../models/consultations/Consultation";
import { processError } from "../../../../helpers/processError";
import LoaderUsefulInfo from "../../../../components/UI/LoaderUsefulInfo/LoaderUsefulInfo";
import "./ArchiveConsultations.scss";

const PAGE_SIZE = 8;

const ArchiveConsultations: React.FC = () => {
  const [search, setSearch] = useState("");
  const [scoreFilter, setScoreFilter] = useState<"all" | 1 | 2 | 3 | 4 | 5>("all");
  const [consultations, setConsultations] = useState<Consultation[]>([]);
  const [page, setPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [loading, setLoading] = useState<boolean>(false);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
  const filteredConsultations = consultations
    .filter((c) =>
      `${c.PatientName} ${c.PatientSurname} ${c?.PatientPatronymic} ${c.DoctorName} ${c.DoctorSurname} ${c?.DoctorPatronymic}`
        .toLowerCase()
        .includes(search.toLowerCase())
    )
    .filter((c) => scoreFilter === "all" || c.score === scoreFilter);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω–µ–Ω –ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ü–µ–Ω–∫–µ (–Ω–µ "all")
  const isScoreFilterApplied = scoreFilter !== "all";
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const hasNoResults = filteredConsultations.length === 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–µ
  const showFilterEmptyState = hasNoResults && isScoreFilterApplied;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–±—â–µ–µ –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤–æ–æ–±—â–µ)
  const showGeneralEmptyState = hasNoResults && !isScoreFilterApplied;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const fetchConsultations = async (pageNumber: number) => {
    try {
      setLoading(true)
      const response = await ConsultationService.getAllConsultations(PAGE_SIZE, pageNumber, {
        consultation_status: "ARCHIVE",
      });
      setConsultations(response.data.consultations);
      setTotalPages(response.data.totalPages || 1);
    } catch (e) {
      processError(e, "–û—à–∏–±–∫–∞ –∑–∞–≥—É—Ä–∑–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π")
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchConsultations(page);
  }, [page]);

  if (loading) return (
    <AccountLayout>
      <div className="page-container archive">
        <h1 className="consultations-doctor__main-title">–ê—Ä—Ö–∏–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</h1>
        <LoaderUsefulInfo />
      </div>
    </AccountLayout>
  )

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤–æ–æ–±—â–µ
  if (showGeneralEmptyState) return (
    <AccountLayout>
      <div className="page-container archive">
        <h1 className="consultations-doctor__main-title">–ê—Ä—Ö–∏–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</h1>

        <div className="archive__filters">
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            value={search}
            onChange={setSearch}
            className="archive__search"
          />

          <Tabs
            tabs={[
              { name: "all", label: "–í—Å–µ" },
              { name: "1", label: "1" },
              { name: "2", label: "2" },
              { name: "3", label: "3" },
              { name: "4", label: "4" },
              { name: "5", label: "5" }
            ]}
            filter
            activeTab={scoreFilter === "all" ? "all" : scoreFilter}
            onTabChange={(tabName) => setScoreFilter(tabName === "all" ? "all" : parseInt(tabName) as 1 | 2 | 3 | 4 | 5)}
            className="archive__tabs"
          />
        </div>

        <div className="lk-tab lk-tab--empty">
          <div className="lk-tab__empty-content">
            <div className="lk-tab__empty-icon">üìÖ</div>
            <h3 className="lk-tab__empty-title">–ù–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</h3>
            <p className="lk-tab__empty-description">–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è</p>
          </div>
        </div>
      </div>
    </AccountLayout>
  )

  return (
    <AccountLayout>
      <div className="page-container archive">
        <h1 className="consultations-doctor__main-title">–ê—Ä—Ö–∏–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</h1>

        <div className="archive__filters">
          <Search
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –§–ò–û —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
            value={search}
            onChange={setSearch}
            className="archive__search"
          />

          <Tabs
            tabs={[
              { name: "all", label: "–í—Å–µ" },
              { name: "1", label: "1" },
              { name: "2", label: "2" },
              { name: "3", label: "3" },
              { name: "4", label: "4" },
              { name: "5", label: "5" }
            ]}
            filter
            activeTab={scoreFilter === "all" ? "all" : scoreFilter?.toString()}
            onTabChange={(tabName) => setScoreFilter(tabName === "all" ? "all" : parseInt(tabName) as 1 | 2 | 3 | 4 | 5)}
            className="archive__tabs"
          />
        </div>

        <div className="archive__list">
          {filteredConsultations.length > 0 ? (
            filteredConsultations.map((c) => (
              <div key={c.id} className="archive__card">
                <div className="archive__right">
                  <div className="archive__time">
                    <span className="archive__date">{getDateLabel(c.date)}</span>
                    <span className="archive__hours">{c.durationTime}</span>
                  </div>

                  <div className="archive__info">
                    <p>
                      <strong>–ö–ª–∏–µ–Ω—Ç: </strong>
                      {<Link to={`/profile/${c.PatientUserId}`}>
                        {c.PatientSurname} {c.PatientName} {c?.PatientPatronymic}
                      </Link>}
                    </p>

                    <p>
                      <strong>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: </strong>
                      {<Link to={`/profile/${c.DoctorUserId}`}>
                        {c.DoctorSurname} {c.DoctorName} {c?.DoctorPatronymic}
                      </Link>}
                    </p>

                    <p>
                      <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: </strong>{" "}
                      {c.recommendations ? (
                        <Link to={`${API_URL}/${c.recommendations}`}>–§–∞–π–ª</Link>
                      ) : (
                        <span>–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</span>
                      )}
                    </p>
                  </div>
                </div>

                <div className="archive__left">
                  {c.score && c.score > 0 ? (
                    <>
                      <span className={`archive__rating archive__rating--${c.score}`}>
                        –û—Ü–µ–Ω–∫–∞: {c.score}
                      </span>

                      <textarea
                        className="archive__review"
                        placeholder="–û—Ç–∑—ã–≤"
                        readOnly
                        value={c.PatientComment || ""}
                      />
                    </>
                  ) : (
                    <>
                      <span className="archive__rating">–û—Ü–µ–Ω–∫—É –µ—â–µ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏</span>
                      <div className="archive__rating">–û—Ç–∑—ã–≤–∞ –Ω–µ—Ç</div>
                    </>
                  )}
                </div>
              </div>
            ))
          ) : (
            showFilterEmptyState && (
              <div className="lk-tab lk-tab--empty">
                <div className="lk-tab__empty-content">
                  <div className="lk-tab__empty-icon">üîç</div>
                  <h3 className="lk-tab__empty-title">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                  <p className="lk-tab__empty-description">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                  </p>
                  <button 
                    className="my-button"
                    onClick={() => setScoreFilter("all")}
                  >
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                  </button>
                </div>
              </div>
            )
          )}
        </div>

        {filteredConsultations.length > 0 && (
          <Pagination page={page} totalPages={totalPages} onChange={(page) => setPage(page)} />
        )}
      </div>
    </AccountLayout>
  );
};

export default ArchiveConsultations;