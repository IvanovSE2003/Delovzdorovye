import { useContext, useEffect, useState } from "react";
import { motion } from "framer-motion";
import AccountLayout from "./AccountLayout";
import type { TypeResponse } from "../../models/response/DefaultResponse";
import type { AxiosError } from "axios";
import UserService from "../../services/UserService";
import { Context } from "../../main";
import { observer } from "mobx-react-lite";

// –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å —ç–º–æ–¥–∑–∏
const typeIcons: Record<string, string> = {
    appointment: "üìÖ",
    message: "üí¨",
    alert: "üö®",
    system: "‚öôÔ∏è",
    default: "üîî"
};

export interface INotification {
    id: number;
    title: string;
    message: string;
    type: "INFO" | "WARNING" | "ERROR" | "CONSULTATION" | "PAYMENT";
    isRead: boolean;
    userId: number;
    entity?: object;
    entityType?: string;
}

// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
// const mockNotifications = [
//     {
//         id: 1,
//         title: "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º",
//         message: "–ü–∞—Ü–∏–µ–Ω—Ç –ò–≤–∞–Ω–æ–≤ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ 12 —Å–µ–Ω—Ç—è–±—Ä—è, 14:00",
//         type: "appointment",
//         isRead: false
//     },
//     {
//         id: 2,
//         title: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
//         message: "–ü–∞—Ü–∏–µ–Ω—Ç –ü–µ—Ç—Ä–æ–≤ –ø—Ä–∏—Å–ª–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤.",
//         type: "message",
//         isRead: false
//     },
//     {
//         id: 3,
//         title: "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
//         message: "–í–∞—à –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å—Ç–µ–∫–∞—Ç—å —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.",
//         type: "system",
//         isRead: true
//     },
//     {
//         id: 4,
//         title: "–°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤",
//         message: "–ü–∞—Ü–∏–µ–Ω—Ç –°–∏–¥–æ—Ä–æ–≤ —Å–æ–æ–±—â–∞–µ—Ç –æ–± —É—Ö—É–¥—à–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.",
//         type: "alert",
//         isRead: false
//     }
// ];

const Bell: React.FC = () => {
    const { store } = useContext(Context);
    const [notifications, setNotifications] = useState<INotification[]>([] as INotification[]);

    // –°–¥–µ–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º
    const markAsRead = (id: number) => {
        setNotifications((prev) =>
            prev.map((n) =>
                n.id === id ? { ...n, isRead: true } : n
            )
        );
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π 
    const fetchNotifications = async () => {
        try {
            const response = await UserService.getNotifications(store.user.id);
            console.log(response.data);
            setNotifications(response.data);
        } catch (e) {
            const error = e as AxiosError<TypeResponse>;
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ", error.response?.data.message);
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        fetchNotifications();
    }, [])

    return (
        <AccountLayout>
            <div className="page-container notifications">
                <h1 className="notifications__title">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h1>
                <div className="notifications__list">
                    {notifications.length > 0 ? notifications.map((n) => (
                        <motion.div
                            key={n.id}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                        >
                            <div
                                className={`notification ${n.isRead ? "notification--read" : "notification--unread"}`}
                            >
                                <div className="notification__icon">
                                    {typeIcons[n.type] || typeIcons.default}
                                </div>
                                <div className="notification__content">
                                    <h2 className="notification__header">{n.title}</h2>
                                    <p className="notification__message">{n.message}</p>
                                </div>
                                {!n.isRead && (
                                    <button
                                        className="notification__button"
                                        onClick={() => markAsRead(n.id)}
                                    >
                                        –ü—Ä–æ—á–∏—Ç–∞–Ω–æ
                                    </button>
                                )}
                            </div>
                        </motion.div>
                    )) : (
                        <div>
                            <div className="notification__empty">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>
                        </div>
                    )}
                </div>
            </div>
        </AccountLayout>
    );
}

export default observer(Bell);