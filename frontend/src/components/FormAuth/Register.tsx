import React, { useContext, useState, type Dispatch, type FormEvent, type SetStateAction } from "react";
import "../FormAuth/FormAuth.scss"
import { Context } from "../../main";
import type { AuthState } from "./FormAuth";
import MyInput from "../UI/MyInput/MyInput";

type Gender = "–º—É–∂—á–∏–Ω–∞" | "–∂–µ–Ω—â–∏–Ω–∞" | "";
type Role = "PACIENT" | "DOCTOR" | "ADMIN" | "";
interface UserDetails {
    name: string;
    surname: string;
    patronymic: string;
    email: string;
    phone: string;
    pin_code: string;
    password: string;
    time_zone: string;
    date_birth: string;
    gender: Gender;
    role: Role;
}

type RegisterProps = {
    setState: Dispatch<SetStateAction<AuthState>>;
};

const Register: React.FC<RegisterProps> = ({ setState }) => {
    const [userDetails, setUserDetails] = useState<UserDetails>({
        name: "",
        surname: "",
        patronymic: "",
        email: "",
        phone: "",
        pin_code: "",
        password: "",
        time_zone: "",
        date_birth: "",
        gender: "",
        role: ""
    });
    const [error, setError] = useState<string>("");
    const [replyPass, setReplyPass] = useState<string>("");
    const [step, setStep] = useState<number>(1);
    const { store } = useContext(Context);

    const handleSubmitDetails = (e: FormEvent): void => {
        e.preventDefault();

        if (replyPass !== userDetails.password) {
            setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
            return;
        }

        const isEmpty = Object.values(userDetails).some(
            (value) => !value || value.trim() === ""
        );
        if (isEmpty) {
            setError("–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
            return;
        }

        setError("");
        // store.registration(userDetails);

        // if (localStorage.getItem('token')) {
        //     window.location.href = '/personal';
        // }

        console.log("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userDetails);
    };

    const handleBack = () => {
        setError("");
        if (step > 1) {
            setStep(step - 1);
        }
    };

    const handleDetailsChange = (field: keyof UserDetails, value: string | Gender | Role): void => {
        setUserDetails((prev) => ({ ...prev, [field]: value }));
    };

    return (
        <div>
            {step === 1 && (
                <div className="auth__form">
                    {error && <p className="auth__error">{error}</p>}

                    <MyInput
                        id="surname"
                        label="–§–∞–º–∏–ª–∏—è"
                        value={userDetails.surname}
                        onChange={(value) => handleDetailsChange("surname", value)}
                        required
                    />

                    <MyInput
                        id="name"
                        label="–ò–º—è"
                        value={userDetails.name}
                        onChange={(value) => handleDetailsChange("name", value)}
                        required
                    />

                    <MyInput
                        id="patronymic"
                        label="–û—Ç—á–µ—Å—Ç–≤–æ"
                        value={userDetails.patronymic}
                        onChange={(value) => handleDetailsChange("patronymic", value)}
                        required
                    />

                    <MyInput
                        id="email"
                        label="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                        value={userDetails.email}
                        onChange={(value) => handleDetailsChange("email", value)}
                        required
                    />

                    <MyInput
                        id="phone"
                        label="–¢–µ–ª–µ—Ñ–æ–Ω"
                        value={userDetails.phone}
                        maxLength={11}
                        onChange={(value) => handleDetailsChange("phone", value)}
                        required
                    />

                    <div className="radios">
                        <div className="form_radio_btn">
                            <input
                                id="male"
                                type="radio"
                                name="male"
                                value="–º—É–∂—á–∏–Ω–∞"
                                checked={userDetails.gender === "–º—É–∂—á–∏–Ω–∞"}
                                onChange={(e) => handleDetailsChange("gender", e.target.value)}
                            />
                            <label htmlFor="male">–ú—É–∂—á–∏–Ω–∞</label>
                        </div>

                        <div className="form_radio_btn">
                            <input
                                id="female"
                                type="radio"
                                name="female"
                                value="–∂–µ–Ω—â–∏–Ω–∞"
                                checked={userDetails.gender === "–∂–µ–Ω—â–∏–Ω–∞"}
                                onChange={(e) => handleDetailsChange("gender", e.target.value)}
                            />
                            <label htmlFor="female">–ñ–µ–Ω—â–∏–Ω–∞</label>
                        </div>
                    </div>

                    <MyInput
                        type="date"
                        id="date_birth"
                        label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"
                        value={userDetails.date_birth}
                        onChange={(value) => handleDetailsChange("date_birth", value)}
                        required
                    />

                    <div className="input-group">
                        <select
                            value={userDetails.time_zone}
                            onChange={(e) => handleDetailsChange("time_zone", e.target.value)}
                            className="auth__input"
                            required
                        >
                            <option value="">–í—ã–±—Ä–∞—Ç—å</option>
                            <option value="0">-1 –ú–°–ö</option>
                            <option value="1">–ú–°–ö</option>
                            <option value="2">+1 –ú–°–ö</option>
                            <option value="3">+2 –ú–°–ö</option>
                            <option value="4">+3 –ú–°–ö</option>
                            <option value="5">+4 –ú–°–ö</option>
                            <option value="6">+5 –ú–°–ö</option>
                            <option value="7">+6 –ú–°–ö</option>
                            <option value="8">+7 –ú–°–ö</option>
                            <option value="9">+8 –ú–°–ö</option>
                            <option value="10">+9 –ú–°–ö</option>
                        </select>
                        <label>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</label>
                    </div>

                    <button className="auth__button" onClick={() => setStep(2)}>
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                    <a onClick={() => setState("login")} className="auth__toggle-button">
                        –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
                    </a>
                </div>
            )}

            {step === 2 && (
                <div className="role-selection auth__form">
                    {error && <p className="auth__error">{error}</p>}

                    <div className="role-selection__cards">
                        <div className="role-card role-card_doctor">
                            <div className="role-card__icon">üë®‚Äç‚öïÔ∏è</div>
                            <h3 className="role-card__title">–î–æ–∫—Ç–æ—Ä</h3>
                            <p className="role-card__description">
                                –Ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ —Ö–æ—á—É –ø–æ–º–æ–≥–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º
                            </p>
                            <button
                                className="role-card__button"
                                onClick={() => {
                                    handleDetailsChange("role", "DOCTOR")
                                    setStep(3);
                                }}
                            >
                                –í—ã–±—Ä–∞—Ç—å
                            </button>
                        </div>

                        <div className="role-card role-card_patient">
                            <div className="role-card__icon">üë§</div>
                            <h3 className="role-card__title">–ü–∞—Ü–∏–µ–Ω—Ç</h3>
                            <p className="role-card__description">
                                –Ø –∏—â—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                            </p>
                            <button
                                className="role-card__button"
                                onClick={() => {
                                    handleDetailsChange("role", "PACIENT")
                                    setStep(3);
                                }}
                            >
                                –í—ã–±—Ä–∞—Ç—å
                            </button>
                        </div>
                    </div>
                    <button
                        onClick={handleBack}
                        className="auth__button"
                    >
                        –ù–∞–∑–∞–¥
                    </button>
                </div>
            )}

            {step === 3 && (
                <form onSubmit={handleSubmitDetails} className="auth__form">
                    {error && <p className="auth__error">{error}</p>}

                    <MyInput
                        id="pin_code"
                        label="–ü–∏–Ω-–∫–æ–¥"
                        value={userDetails.pin_code}
                        maxLength={4}
                        onChange={(value) => handleDetailsChange("pin_code", value)}
                        required
                    />

                    <MyInput
                        type="password"
                        id="password"
                        label="–ü–∞—Ä–æ–ª—å"
                        value={userDetails.password}
                        onChange={(value) => handleDetailsChange("password", value)}
                        required
                    />

                    <MyInput
                        type="password"
                        id="repeat-password"
                        label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        value={replyPass}
                        onChange={(value) => setReplyPass(value)}
                        required
                    />

                    <button type="submit"
                        className="auth__button__final"
                    >
                        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                    </button>

                    <button
                        type="button"
                        onClick={handleBack}
                        className="auth__button"
                    >
                        –ù–∞–∑–∞–¥
                    </button>
                </form>
            )}
        </div>
    );
};

export default Register;