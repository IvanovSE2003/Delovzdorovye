import SmsService from "../../domain/services/sms.service.js";
import TelegramService from '../../domain/services/telegram.service.js';
import models from '../../../infrastructure/persostence/models/models.js';
import { ITelegramCreationAttributes } from '../../../infrastructure/persostence/models/interfaces/telegram.model.js';
import UserRepository from "../../domain/repositories/user.repository.js";

const { UserTelegramModel, UserModel } = models;

export default class SmsServiceImpl implements SmsService {
    constructor(
        private readonly telegramService: TelegramService,
        private readonly userRepository: UserRepository
    ) {}

    async sendVerificationCode(phone: string, code: string): Promise<void> {
        const user = await UserModel.findOne({ where: { phone } });
            
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const userTelegram = await UserTelegramModel.findOne({where: { userId: user.id }}) as unknown as ITelegramCreationAttributes;

        if (userTelegram) {
            await this.telegramService.sendMessage(
                userTelegram.telegram_chat_id.toString(), 
                `üîê –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –î–µ–ª–æ –≤ –∑–¥–æ—Ä–æ–≤—å–µ: **${code}**\n–ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É!`,
                {parse_mode: 'Markdown'}
            )
        }
    }

    async sendLoginNotification(userId: number): Promise<void> {
        const user = await UserModel.findByPk(userId);
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const userTelegram = await UserTelegramModel.findOne({where: { userId }}) as unknown as ITelegramCreationAttributes;

        if (userTelegram) {
            await this.telegramService.sendMessage(
                userTelegram.telegram_chat_id.toString(),  
                'üîî –í –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –î–µ–ª–æ –≤ –∑–¥–æ—Ä–æ–≤—å–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã, —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å!',
                {parse_mode: 'Markdown'}
            )
        } else {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É');
        }
    }

    async sendPinCodeResetEmail(phone: string, resetToken: string): Promise<void> {
        const user = await this.userRepository.findByPhone(phone);
        if(!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const resetUrl = `${process.env.CLIENT_URL}/pinCode-reset/${resetToken}`;
        const userTelegram = await UserTelegramModel.findOne({where: { userId: user.id }}) as unknown as ITelegramCreationAttributes;

        if (userTelegram) {
            await this.telegramService.sendMessage(
                userTelegram.telegram_chat_id.toString(),  
                `üõ†Ô∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∏–Ω-–∫–æ–¥–∞ \n${resetUrl} \n\n‚ÄºÔ∏è–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.‚ÄºÔ∏è`,
                { parse_mode: 'markdown' }
            )
        } else {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—É');
        }
    }
}